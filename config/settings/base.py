"""
Django settings for lemarche project.

Generated by 'django-admin startproject' using Django 3.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path


# Build paths inside the project like this: ROOT_DIR / 'subdir'.
ROOT_DIR = Path(__file__).resolve().parent.parent.parent
APPS_DIR = os.path.abspath(os.path.join(ROOT_DIR, "lemarche"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', "False") in ("true", "True", "1", "t")

ALLOWED_HOSTS = []

# Bitoubi Specific Settings
TRACKER_HOST = os.environ.get('TRACKER_HOST', 'http://localhost')
BITOUBI_ENV = os.environ.get('ENV', 'dev')

# Static Files
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(ROOT_DIR, "staticfiles")
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Application definition

AUTH_USER_MODEL = "users.User"

PRIORITY_APPS = [
    # Force whitenoise to serve assets in debug mode
    "whitenoise.runserver_nostatic"
]

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "bootstrap4",
    "rest_framework",
    "drf_spectacular",
]

THIRD_PARTY_APPS = [
]

LOCAL_APPS = [
    # Core
    "lemarche.cocorico",
    "lemarche.users",
    "lemarche.tracker",
    # Api
    "lemarche.api",
]

INSTALLED_APPS = PRIORITY_APPS + DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Third-party Middlewares
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # BITOUBI Middlewares
    "lemarche.tracker.middlewares.TokenVisitMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(APPS_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Compatible with clevercloud add-ons
# Standard dict access to force fail if not provided
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "HOST": os.environ["POSTGRESQL_ADDON_HOST"],
        "PORT": os.environ["POSTGRESQL_ADDON_PORT"],
        "NAME": os.environ["POSTGRESQL_ADDON_DB"],
        "USER": os.environ["POSTGRESQL_ADDON_USER"],
        "PASSWORD": os.environ["POSTGRESQL_ADDON_PASSWORD"],
    },
    "structures": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ["MYSQL_ADDON_DB"],
        "USER": os.environ["MYSQL_ADDON_USER"],
        "PASSWORD": os.environ["MYSQL_ADDON_PASSWORD"],
        "HOST": os.environ["MYSQL_ADDON_HOST"],
        "PORT": os.environ["MYSQL_ADDON_PORT"],
    },
}

# Needed as long as Cocorico database used as data source
DATABASE_ROUTERS = ["config.routers.CocoRouter"]


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", "OPTIONS": {"min_length": 4}},
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# API is in french
LANGUAGE_CODE = "fr-fr"

# France timezone
TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # YOUR SETTINGS
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
}

# Spectacular settings.
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
# ----------------------------------------------------
SPECTACULAR_SETTINGS = {
    "TITLE": "API march√© de l'inclusion",
    "DESCRIPTION": "Une initiative de la Plateforme de l'inclusion",
    "VERSION": "0.1.0",
    "CONTACT": "lemarche@inclusion.beta.gouv.fr",
}

# django-bootstrap4.
# https://django-bootstrap4.readthedocs.io/en/latest/settings.html
# ------------------------------------------------------------------------------

BOOTSTRAP4 = {
    "required_css_class": "form-group-required",
    # Remove the default `.is-valid` class that Bootstrap will style in green
    # otherwise empty required fields will be marked as valid. This might be
    # a bug in django-bootstrap4, it should be investigated.
    "success_css_class": "",
}

# Logging.
# https://docs.djangoproject.com/en/dev/topics/logging
# ----------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
        "null": {"class": "logging.NullHandler"},
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        # Silence `Invalid HTTP_HOST header` errors.
        # This should be done at the HTTP server level when possible.
        # https://docs.djangoproject.com/en/3.0/topics/logging/#django-security
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
        "lemarche": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
        },
    },
}
